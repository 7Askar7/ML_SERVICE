version: '3.8'

services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - mlserv_net

  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile
    # Возвращаем команду uvicorn
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./app:/app/app
      - ./etc:/app/etc
      - ./mlserv.db:/app/mlserv.db 
    ports:
      - "8000:8000"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=all
    depends_on:
      - redis
      - jaeger
    networks:
      - mlserv_net
    runtime: nvidia

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile

    command: celery -A app.core.celery_app worker --loglevel=debug -Q celery,asr_priority -P solo
    volumes:
      - ./app:/app/app
      - ./etc:/app/etc
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317 
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=all
    depends_on:
      - redis
      - fastapi_app
      - jaeger
    networks:
      - mlserv_net
    runtime: nvidia

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - mlserv_net

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - mlserv_net
    restart: unless-stopped

  celery-exporter:
    image: danihodovic/celery-exporter:latest
    container_name: celery-exporter
    command: --broker-url=redis://redis:6379/0
    ports:
      - "9808:9808"
    networks:
      - mlserv_net
    restart: unless-stopped
    depends_on:
      - redis

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - mlserv_net
    restart: unless-stopped

  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:4.2.0-4.1.0-ubuntu22.04
    container_name: dcgm-exporter
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9400:9400"
    networks:
      - mlserv_net

volumes:
  prometheus_data:

networks:
  mlserv_net:
    driver: bridge 